(Print this page as a cover sheet for your printouts)

LAB 6 (optional extra credit) - STL and Text Processing
Section: CPSC 121-______________
Due: 11:59 P.M. Tuesday, May 3, 2011

"On my honor, as an Aggie, I have neither given nor received any unauthorized
aid on any portion of the academic work included in this assignment."


________________________________	________________________________
Typed or printed name of student	Signature of student 

NOTE:  Please follow your lab instructor's directions for submitting your
assignment through CSNET.  ONLY ASSIGNMENTS SUBMITTED TO CSNET WILL BE
GRADED!  Make a printout of each source file and staple it behind this cover
sheet, unless your lab instructor directs otherwise.  Sign it and give it to
your TA in lab or put it in your TA's mailbox in the corner of the 3rd floor
of HRBB, near room 312.  IF YOU DO NOT TURN IN A SIGNED COVER SHEET YOUR WORK
WILL NOT BE GRADED!

NOTE:  Homework will be graded on unix.cse.tamu.edu using g++.  You are free to
develop your programs on Visual C++ or any other platform, but it is your
responsibility to make sure your programs also compile and execute correctly on
unix.cse.tamu.edu using g++.

The grade for this lab will be based on style (formatting, variable names,
comments, etc.), syntax (no compilation or link errors), and correctness
(passes all test cases).  Your grade for this lab is:

Problem #       1       2       3       4       
Style            /2      /2      /2      /2
Syntax           /3      /3      /3      /3
Correctness      /5      /5      /5      /5
-------------------------------------------------------------------
Total            /10     /10     /10     /10

Grand total _____/40

1. (10 points) Read in a text file (using >> to a string, which stops at
whitespace) and add the "words" to an STL multiset. Ask for a "word"
from the console and use count_if to count how many times it occurs in
the multiset. Name your program hw6pr1a.cpp.

Do the same thing using a map<string, int> like page 745, only this time use
the find function. Name your program hw6pr1b.cpp.

2. (10 points) Read a line from the console into a string s using
getline and see if it is a palindrome by using a forward iterator
(starting at s.begin()) and a reverse iterator (starting at s.rbegin())
to pick the characters to compare. Remember that a palindrome is spelled
the same way forward and backward. Make sure your program "eats" all
whitespace outside of the words you are testing.

Name your program hw6pr2.cpp.

3. (10 points) Write a C++ program using regular expressions 
(http://www.boost.org/) that interactively determines if a number entered by
the user is a Social Security number. Social Security numbers are identified as
the following:

Having a pattern of 3 digits, a hyphen, 2 digits, a hyphen, and 4
digits.

If any of the three fields is zeroes (e.g., 000-14-9375, 478-00-3784, or
289-47-0000), it is not a Social Security number.

If the number begins with 666, it is not a Social Security number.

If the number begins with 987-65-432 (followed by any single digit), it
is not a Social Security number.

A sample run of your program should look like:

Enter number: 923-45-6789
valid

Enter number: abcdefghi
invalid

Enter number: 283-01-0000
invalid

Name your program hw6pr3.cpp. Note: You will need to link with the Boost regex
library like this: g++ hw6pr3.cpp -lboost_regex.

4. (10 points) Extend program 3 so that a user can input a Social Security 
number without hyphens or with arbitrary spaces or hyphens between the numbers.
The program should run the same as program 3, except that, in these cases, it
should print a "corrected" number and then state "valid". For example:

Enter number: 92 345 6 7 8-9
923-45-6789
valid

Name your program hw6pr4.cpp.
